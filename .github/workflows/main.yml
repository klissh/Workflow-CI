name: ML CI/CD Workflow (Skilled, Advanced)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  skilled-mlproject:
    runs-on: ubuntu-latest
    env:
      MLFLOW_TRACKING_URI: file:/tmp/mlruns
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          channels: defaults
          auto-update-conda: true
          activate-environment: base

      - name: Create/Update environment from conda.yaml
        run: |
          conda env update -n mlflow-credit-scoring-env -f Workflow-CI/MLProject/conda.yaml || conda env create -n mlflow-credit-scoring-env -f Workflow-CI/MLProject/conda.yaml

      - name: Verify dataset presence
        run: |
          if [ -f "Workflow-CI/MLProject/dataset_preprocessing/creditcard_processed.csv" ]; then
            echo "Dataset found"
          else
            echo "Dataset Workflow-CI/MLProject/dataset_preprocessing/creditcard_processed.csv not found" && exit 1
          fi

      - name: Run MLflow project (conda env-manager)
        run: |
          conda run -n mlflow-credit-scoring-env mlflow run Workflow-CI/MLProject --env-manager=conda

      - name: Package model artifacts
        run: |
          TRACKING_PATH="${MLFLOW_TRACKING_URI#file:}"
          RUN_ID=$(ls -t "$TRACKING_PATH/0/" | grep -v meta.yaml | head -1)
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV
          zip -r "model_artifacts_${RUN_ID}.zip" "$TRACKING_PATH/0/$RUN_ID/artifacts/model"

      - name: Upload MLflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: skilled-model-artifacts-${{ env.RUN_ID }}
          path: model_artifacts_${{ env.RUN_ID }}.zip

  advanced-deploy:
    runs-on: ubuntu-latest
    needs: skilled-mlproject
    env:
      MLFLOW_TRACKING_URI: file:/tmp/mlruns
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          channels: defaults
          auto-update-conda: true
          activate-environment: mlflow-credit-scoring-env

      - name: Create/Update environment from conda.yaml
        run: |
          conda env update -n mlflow-credit-scoring-env -f Workflow-CI/MLProject/conda.yaml || conda env create -n mlflow-credit-scoring-env -f Workflow-CI/MLProject/conda.yaml

      - name: Verify dataset presence
        run: |
          if [ -f "Workflow-CI/MLProject/dataset_preprocessing/creditcard_processed.csv" ]; then
            echo "Dataset found"
          else
            echo "Dataset Workflow-CI/MLProject/dataset_preprocessing/creditcard_processed.csv not found" && exit 1
          fi

      - name: Run MLflow project (conda env-manager)
        run: |
          conda run -n mlflow-credit-scoring-env mlflow run Workflow-CI/MLProject --env-manager=conda

      - name: Upload to Google Drive
        run: echo "Skipping Google Drive upload in CI (disabled)"

      - name: Build Docker image
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          if [ -z "$DOCKERHUB_USERNAME" ]; then
            echo "Missing DOCKERHUB_USERNAME secret"; exit 1;
          fi
          TRACKING_PATH="${MLFLOW_TRACKING_URI#file:}"
          RUN_ID=$(ls -t "$TRACKING_PATH/0/" | grep -v meta.yaml | head -1)
          mkdir -p build/model
          cp -r "$TRACKING_PATH/0/$RUN_ID/artifacts/model/" build/model/
          cat > Dockerfile << 'EOF'
FROM python:3.12-slim
WORKDIR /app
COPY build/model /app/model
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir uvicorn mlflow && \
    if [ -f /app/model/requirements.txt ]; then pip install --no-cache-dir -r /app/model/requirements.txt; fi
EXPOSE 1234
CMD ["python","-m","mlflow","models","serve","--model-uri","/app/model","--port","1234","--no-conda"]
EOF
          IMAGE_BASE="$DOCKERHUB_USERNAME/credit-scoring"
          docker build -t "$IMAGE_BASE:latest" .
          docker tag "$IMAGE_BASE:latest" "$IMAGE_BASE:${GITHUB_SHA}"

      - name: Push Docker image
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          if [ -z "$DOCKERHUB_USERNAME" ] || [ -z "$DOCKERHUB_TOKEN" ]; then
            echo "Missing Docker Hub secrets"; exit 1;
          fi
          echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
          IMAGE_BASE="$DOCKERHUB_USERNAME/credit-scoring"
          docker push "$IMAGE_BASE:latest"
          docker push "$IMAGE_BASE:${GITHUB_SHA}"